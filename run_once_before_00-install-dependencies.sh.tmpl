#!/bin/bash
set -euo pipefail

# Function to install Homebrew packages
install_homebrew_packages() {
    brew bundle --no-lock --file=/dev/stdin <<EOF
brew "bat"
brew "dust"
brew "fd"
brew "fzf"
brew "git-delta"
brew "httpie"
brew "hyperfine"
brew "jnv"
brew "jq"
brew "lazygit"
brew "lsd"
brew "luarocks"
brew "mise"
brew "navi"
brew "neovim"
brew "onefetch"
brew "poppler"
brew "pre-commit"
brew "ripgrep"
brew "rust-analyzer"
brew "starship"
brew "thefuck"
brew "tldr"
brew "tmux"
brew "unar"
brew "yazi"
brew "zoxide"
EOF
}

# Function to ensure required tools are installed on Linux
ensure_linux_dependencies() {
    local packages_to_install=()
    if ! command -v curl &>/dev/null; then
        packages_to_install+=("curl")
    fi
    if ! command -v fc-cache &>/dev/null; then
        packages_to_install+=("fontconfig")
    fi
    if ! command -v notify-send &>/dev/null; then
        if command -v apt-get &>/dev/null; then
            packages_to_install+=("libnotify-bin")
        elif command -v dnf &>/dev/null || command -v yum &>/dev/null; then
            packages_to_install+=("libnotify")
        elif command -v pacman &>/dev/null; then
            packages_to_install+=("libnotify")
        else
            echo "Warning: Unable to determine package for notify-send. Please install it manually." >&2
        fi
    fi
    if [ ${#packages_to_install[@]} -ne 0 ]; then
        echo "Installing required packages: ${packages_to_install[*]}"
        if command -v apt-get &>/dev/null; then
            sudo apt-get update && sudo apt-get install -y "${packages_to_install[@]}"
        elif command -v dnf &>/dev/null; then
            sudo dnf install -y "${packages_to_install[@]}"
        elif command -v yum &>/dev/null; then
            sudo yum install -y "${packages_to_install[@]}"
        elif command -v pacman &>/dev/null; then
            sudo pacman -Syu --noconfirm "${packages_to_install[@]}"
        else
            echo "Error: Unable to install packages. Please install ${packages_to_install[*]} manually." >&2
            return 1
        fi
    fi
}

# Function to install Hasklig Nerd Font on Linux
install_hasklig_nerd_font_linux() {
    local FONT_BASE_DIR="$HOME/.local/share/fonts"
    local NERD_FONTS_DIR="$FONT_BASE_DIR/NerdFonts"
    local HASKLIG_DIR="$NERD_FONTS_DIR/Hasklig"
    local FONT_URL="https://github.com/ryanoasis/nerd-fonts/releases/latest/download/Hasklig.tar.xz"

    echo "Installing Hasklig Nerd Font..."

    # Ensure dependencies are installed
    ensure_linux_dependencies || return 1

    # Create Hasklig Nerd Font directory
    mkdir -p "$HASKLIG_DIR" || {
        echo "Error: Failed to create Hasklig Nerd Font directory $HASKLIG_DIR" >&2
        return 1
    }

    # Download and extract font
    if ! curl -sL "$FONT_URL" | tar xJf - -C "$HASKLIG_DIR"; then
        echo "Error: Failed to download or extract font" >&2
        return 1
    fi

    # Update font cache
    fc-cache -f "$FONT_BASE_DIR" || echo "Warning: Failed to update font cache. You may need to do this manually." >&2

    echo "Hasklig Nerd Font installed successfully."
}

install_node() {
    echo "Installing Node..."
    mise use node
    echo "Node installed successfully."
}

install_python() {
    echo "Installing Python..."
    mise use python
    echo "Python installed successfully."
}

# Main script execution
main() {
    # Install Homebrew packages
    if ! install_homebrew_packages; then
        echo "Error: Failed to install Homebrew packages" >&2
        exit 1
    fi

    # OS-specific installations
    {{ if eq .chezmoi.os "darwin" }}
    if ! brew install --cask font-hasklug-nerd-font; then
        echo "Error: Failed to install Hasklig Nerd Font via Homebrew" >&2
        exit 1
    fi

    if ! brew install terminal-notifier; then
        echo "Error: Failed to install terminal-notifier" >&2
        exit 1
    fi

    {{ else if eq .chezmoi.os "linux" }}
    if ! install_hasklig_nerd_font_linux; then
        echo "Error: Failed to install Hasklig Nerd Font on Linux" >&2
        exit 1
    fi
    {{ end }}

    if ! install_node; then
        echo "Error: Failed to install Node" >&2
        exit 1
    fi

    if ! install_python; then
        echo "Error: Failed to install Python" >&2
        exit 1
    fi

    echo "All installations completed successfully."
}

# Run the main function
main
